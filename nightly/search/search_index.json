{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Intelligence Message (GIM) \ud83d\ude80","text":"<p>An advanced Git commit message generation utility designed to automatically craft high-quality commit messages with precision and sophistication.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83e\udd16 AI-powered commit message generation</li> <li>\u26a1 Lightning fast Rust implementation</li> <li>\ud83d\udd27 Easy configuration for various AI providers</li> <li>\ud83d\udd04 Automatic git staging (optional)</li> <li>\u270f\ufe0f Amend previous commits</li> </ul> <p>Ready for Installation?</p>"},{"location":"ai/","title":"AI Configuration","text":"<p>Before generating git commit message, you have to setup your ai model.</p>"},{"location":"ai/#configuration","title":"Configuration","text":"<p>Utilise the <code>gim ai</code> command to configure AI-related parameters:</p> <pre><code># Configure AI model\ngim ai --model \"your-model-name\"\n\n# Set API key\ngim ai --apikey \"your-api-key\"\n\n# Define API endpoint\ngim ai --url \"your-api-url\"\n\n# Set output language\ngim ai --language \"your-language\"\n</code></pre> <p>Important: The <code>--url</code> parameter only supports OpenAI-compatible API endpoints ,such as OpenAI official or third-party services compatible with OpenAI protocol.</p>"},{"location":"ai/#ai-configuration-options","title":"AI Configuration Options","text":"<ul> <li><code>-m, --model &lt;STRING&gt;</code>: Specify the AI model to be utilised</li> <li><code>-k, --apikey &lt;STRING&gt;</code>: Configure the API key for AI service</li> <li><code>-u, --url &lt;STRING&gt;</code>: (Optional) Set the API endpoint for AI service. It's optional if your model matches built-in models prefixes described below.</li> <li><code>-l, --language &lt;STRING&gt;</code>: (Optional) Define the language of generated commit messages. It's optional as 'English' is default.</li> </ul> <p><code>gim ai -h</code> is available to find help message</p>"},{"location":"ai/#built-in-models-support","title":"Built-in Models Support","text":"<p>The following model prefixes are supported with their respective default endpoints:</p> Model Prefix Service Provider Default Endpoint <code>gpt-*</code> OpenAI <code>https://api.openai.com/v1/chat/completions</code> <code>moonshot-*</code> Moonshot AI <code>https://api.moonshot.cn/v1/chat/completions</code> <code>qwen-*</code> Alibaba Qwen <code>https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions</code> <code>gemini-*</code> Google Gemini <code>https://generativelanguage.googleapis.com/v1beta/openai/</code> <code>doubao-*</code> ByteDance Doubao <code>https://ark.cn-beijing.volces.com/api/v3/chat/completions</code> <code>glm-*</code> THUDM GLM <code>https://open.bigmodel.cn/api/paas/v4/chat/completions</code> <code>deepseek-*</code> DeepSeek <code>https://api.deepseek.com/chat/completions</code> <code>qianfan-*</code> Baidu Qianfan <code>https://qianfan.baidubce.com/v2/chat/completions</code> <p>You can use any model name starting with these prefixes, and the corresponding endpoint will be used automatically (so you don't need to set <code>--url</code>).</p>"},{"location":"cli/","title":"Command Line Interface","text":""},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<pre><code># Generate commit message automatically\ngim\n\n# Specify commit subject instead of conclude from commit description;\n# The description is generated by AI anyway.\ngim --title \"your commit title\"\n\n# Stage unstaged changes automatically\ngim --auto-add\n</code></pre>"},{"location":"cli/#recommended-usage","title":"Recommended Usage","text":"<pre><code># Basic usage - generate commit message for staged changes\ngim\n\n# Auto-stage changes and generate commit message\ngim -a\n\n# Amend the most recent commit\ngim -ap\n</code></pre>"},{"location":"cli/#command-options","title":"Command Options","text":"<ul> <li><code>-t, --title &lt;STRING&gt;</code>: Specify the commit message title</li> <li><code>-a, --auto-add</code>: Automatically stage all modifications</li> <li><code>-p, --update</code>: Amend the most recent commit</li> <li><code>-v, --verbose</code>: Show detailed information</li> </ul> <p>You can combine these options; Use the <code>-h</code> option to view help information.</p>"},{"location":"contribute/","title":"Contributing","text":"<p>Feel free to fire feature request or bug issue if you want and necessary: Issues.</p>"},{"location":"contribute/#my-request","title":"My Request","text":"<p>This project is currently macOS-only. Contributions to support other platforms are highly welcome and appreciated.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#using-homebrew-macoslinux","title":"Using Homebrew (macOS/Linux)","text":"<p><pre><code>brew tap davelet/gim\nbrew install git-intelligence-message\n</code></pre> or <pre><code>brew install davelet/gim/git-intelligence-message\n</code></pre></p>"},{"location":"installation/#using-cargo","title":"Using Cargo","text":"<pre><code>cargo install git-intelligence-message\n</code></pre>"},{"location":"installation/#build-from-source","title":"Build from source","text":"<pre><code>git clone https://github.com/davelet/git-intelligence-message.git\ncd git-intelligence-message\ncargo install --path .\n</code></pre>"},{"location":"prompt/","title":"Prompt Management","text":"<p>View and edit the AI prompt used for generating commit message, for description and subject respectively:</p> <pre><code># View current prompt\ngim prompt\n\n# Open the prompt files in default file manager for editing\ngim prompt --edit\n\n# Edit a specific prompt file with default editor\ngim prompt --edit --prompt diff\n\n# Edit a specific prompt file with custom editor, \n# like 'code', 'vim' or any other text editor available on your Mac\ngim prompt --edit --prompt subject --editor code\n</code></pre> <p>The <code>-prompt</code> option can take these params:</p> <ul> <li><code>d</code>, <code>diff</code>, <code>diff_prompt</code> for summarizing file changes, which will be used as the commit description.</li> <li><code>s</code>, <code>subject</code>, <code>subject_prompt</code> for generating the commit subject based on the summary of file changes.</li> </ul>"},{"location":"update/","title":"Update","text":"<p>Check for updates and install the latest version:</p> <pre><code>gim update\n</code></pre> <p>Force update even if you're on the latest version:</p> <pre><code>gim update --force\n</code></pre> <p>You don't need to check update manually. The application will check for updates by itself every time you run it.</p>"}]}